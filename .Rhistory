datalist[[i]] <-a
}
#To combine all
big_data = do.call(rbind, datalist)
#To remove duplicates
big_data <- subset(big_data, !duplicated(big_data$text))
final_data<- big_data[ , which(names(big_data) %in% c("favoriteCount","created","id",
"retweetCount","text","drugName"))]
df <- final_data[, order(names(final_data))]
df$created <- strftime(df$created, '%Y-%m-%d')
return(df)
}
######################################################################################################
#########################   SENTIMENT FUNCTION FOR REVIEW ANALYSIS  ##################################
######################################################################################################
score.sentiment = function(sentences , pos.words, neg.words , .progress='none')
{
require(plyr)
require(stringr)
scores = laply(sentences,function(sentence,pos.words,neg.words)
{
sentence =gsub('[[:punct:]]','',sentence)
sentence =gsub('[[:cntrl:]]','',sentence)
sentence =gsub('\\d+','',sentence)
sentence =gsub(" ?(f|ht)tp(s?)://(.*)[.][a-z]+", "", sentence)
sentence=str_replace_all(sentence,"[^[:graph:]]", " ")
sentence=tolower(sentence)
word.list=str_split(sentence,'\\s+')
words=unlist(word.list)
pos.matches=match(words,pos.words)
neg.matches=match(words,neg.words)
pos.matches = !is.na(pos.matches)
neg.matches = !is.na(neg.matches)
score=sum(pos.matches)-sum(neg.matches)
return(score)
},pos.words,neg.words,.progress=.progress)
scores.df=data.frame(scores=scores)
return(scores.df)
}
######################################################################################################
########################## Twitter Sentiment Analysis Function  ######################################
######################################################################################################
TwitterSentimentAnalysisFunction <-function(){
w <- TwitterScoreFunction()
senti <- calculate_sentiment(w$text)
s1<-data.frame()
sentimentOfText<- senti$sentiment
output <- cbind(w,sentimentOfText)
output$sentimentOfText <- as.character(output$sentimentOfText)
output$sentimentOfText[output$sentimentOfText == "Positive"] <- "1"
output$sentimentOfText[output$sentimentOfText == "Very Positive"] <- "2"
output$sentimentOfText[output$sentimentOfText == "Negative"] <- "-1"
output$sentimentOfText[output$sentimentOfText == "Very Negative"] <- "-2"
output$sentimentOfText[output$sentimentOfText == "Neutral"] <- "0"
output$sentimentOfText <- as.numeric(output$sentimentOfText)
a<- max(output$favoriteCount)
b<- min(output$favoriteCount)
output$normFavcount <- with(output, (output$favoriteCount-b)/a )
c<- max(output$retweetCount)
d<- min(output$retweetCount)
output$normRetcount <- with(output, (output$retweetCount-d)/c )
output$sum<- (2*output$normRetcount)+(output$normFavcount)+1
output$normalizedRating <-  (output$sum*output$sentimentOfText)
output$Rating<-output$normalizedRating
output$Rating<- rescale(output$normalizedRating, to = c(0, 5), from = range(output$normalizedRating, na.rm = TRUE, finite = TRUE))
return(output)
}
############################################################################################################
##########################################     Main function     ###########################################
############################################################################################################
DrugAnalysisFunction <-function(){
w<- TwitterSentimentAnalysisFunction()
## if needed include round command for w$Rating
w2 <- transform(w, user=match(id, unique(id)))
w3 <- transform(w2,item=match(drugName, unique(drugName)))
final_data<- w3[ , which(names(w3) %in% c("user","item","Rating"))]
return(final_data)
}
############################################################################################################
#################     POPULARITY BASED RECOMMENDATION SYSTEM     ###########################################
############################################################################################################
PopularityDrugRec <-function(){
library(recommenderlab)
library(recosystem)
library(SlopeOne)
library(SVDApproximation)
library(data.table)
library(RColorBrewer)
library(ggplot2)
ratings<-DrugAnalysisFunction()
names(ratings)[names(ratings) == 'Rating'] <- 'rating'
ratingmat <- dcast(ratings, user~item, value.var = "rating", na.rm=FALSE)
ratingmat <- as.matrix(ratingmat[,-1]) #remove userrow at first column in above frame
#Convert rating matrix into a recommenderlab sparse matrix
ratingmat <- as(ratingmat, "realRatingMatrix")
#Create Recommender Model. "POPULAR" stands for POPULARITY BASED Filtering
recommender_model <- Recommender(ratingmat[1:nrow(ratingmat)], method = "POPULAR")
############Create predictions#############################
recom <- predict(recommender_model, ratingmat[1:nrow(ratingmat)],n=ncol(ratingmat))
#########Converting output into matrix
recom_list <- as(recom, "matrix")
recom_list <-as.data.frame(recom_list)
a<- colMeans(x=recom_list, na.rm = TRUE)
b<- as.matrix(a)
rows <- which(b > mean(b))
f<- input[rows,2]
return(as.data.frame(f))
}
############################################################################################################
####################     CONTENT BASED RECOMMENDATION SYSTEM     ###########################################
############################################################################################################
ContentDrugRec <-function(){
i1<-menu(c("1. OTC- Over the Counter", "2. Rx/OTC- Prescription or Over the Counter"),
graphics = TRUE, title="Type of Drug do you need")
i2<-menu(c("1.A ", "2.B","3.C ", "4.D","5.X","6.N"),
graphics = TRUE, title="select the pregnency level")
i<- input[,-c(1,2)]
ui <-data.frame(matrix(NA, nrow = 1, ncol = ncol(i)))
colnames(ui) <- colnames(i)
switch(i1,
m = {
ui$OTC<-1
},
m = {
ui$OTC<-1
ui$bothRxOTC<-1
}
)
switch(i2,
m = {
ui$PregA<-"1"
},
m = {
ui$PregA<-"1"
ui$PregB<-"1"
},
m = {
ui$PregA<-"1"
ui$PregB<-"1"
ui$PregC<-"1"
},
m = {
ui$PregA<-"1"
ui$PregB<-"1"
ui$PregC<-"1"
ui$PregD<-"1"
},
m = {
ui$PregA<-"1"
ui$PregB<-"1"
ui$PregC<-"1"
ui$PregD<-"1"
ui$PregX<-"1"
},
m = {
ui$PregA<-"1"
ui$PregB<-"1"
ui$PregC<-"1"
ui$PregD<-"1"
ui$PregX<-"1"
ui$PregN<-"1"
}
)
ui[is.na(ui)] <- 0
sim_mat <- rbind.data.frame(ui, i)
sim_mat <- data.frame(lapply(sim_mat,function(x){as.integer(x)})) #convert data to type integer
sim_results <- dist(sim_mat, method = "cosine")
sim_results <- as.data.frame(as.matrix(sim_results[1:nrow(i)]))
rows <- which(sim_results > mean(sim_results$V1))
return(input[rows,2])
}
############################################################################################################
####################     CONTENT BASED RECOMMENDATION SYSTEM     ###########################################
############################################################################################################
RunApplication<-function(){
output1 <- ContentDrugRec()
output1 <- as.data.frame(output1)
output2 <- PopularityDrugRec()
colnames(output1)<- colnames(output2)
finaloutput <- rbind(output1,output2) # rbind-combining the results
finaloutput1 <-as.data.frame(table(finaloutput)) #table function returning the output frequency values
finaloutput2 <- finaloutput1[finaloutput1$Freq==2,] #returning the high freuent values: bg is two times
finaloutput3 <- finaloutput2$finaloutput #obtaining DRUG names on the data frame
finaloutput4 <- as.data.frame(finaloutput3)
finaloutput5<-finaloutput4$finaloutput3
return(finaloutput5)
}
w<-RunApplication()
input <- read.csv(file ="inputTableFinal.csv",sep = ",",stringsAsFactors=FALSE)
pos.words <- scan('C:/Users/monis/Pictures/Capstone Project R/druganalysisLocal/positive-words.txt',
what='character', comment.char=';') #folder with positive dictionary
neg.words <- scan('C:/Users/monis/Pictures/Capstone Project R/druganalysisLocal/negative-words.txt',
what='character', comment.char=';') #folder with negative dictionary
w<-RunApplication()
library(scales)
library(RSentiment)
library(RColorBrewer)
library(wordcloud)
library(tm)
library(twitteR)
library(ROAuth)
library(plyr)
library(stringr)
library(base64enc)
library(wordcloud)
library(SnowballC)
library(tm)
library(RCurl)
library(purrr)
library(dplyr)
library(reshape2)
library(scales)
library(RSentiment)
library(RColorBrewer)
library(wordcloud)
library(tm)
library(twitteR)
library(ROAuth)
library(plyr)
library(stringr)
library(base64enc)
library(wordcloud)
library(SnowballC)
library(tm)
library(RCurl)
library(purrr)
library(dplyr)
library(reshape2)
######################################################################################################
######   THIS FILE IS HAVING ALL THE NECESSARY FUNCTIONS NEEDED FOR YOUR DRUG ANALYSIS     ###########
#########   RUN THIS WHOLE FILE TO MOVE FUNCTIONS TO THE RSTUDIO ENVIRONMENT  ########################
######################################################################################################
######################################################################################################
################################   Twitter Score Function  ######################################
######################################################################################################
TwitterScoreFunction <-function(){
output1 <- TwitterDataCleaningFunc()
outputWithScores <- score.sentiment(output1$text, pos.words, neg.words, .progress='text')
finalOutput <- cbind(output1,outputWithScores)
return(finalOutput)
}
######################################################################################################
################################   Twitter Collection Function  ######################################
######################################################################################################
TwitterCollectionFunc<- function(searchterm){
list <- searchTwitter(searchterm,  n=100, lang = "en")
if(length(list) == 0) {
return()
}
df <- twListToDF(list)
return(df)
}
######################################################################################################
############################### Twitter Data Cleaning Function  ######################################
######################################################################################################
TwitterDataCleaningFunc<- function(){
datalist = list()
for (i in 1:nrow(input)) {
a<- TwitterCollectionFunc(input$drugName[i])
a$drugName <- input$drugName[i]
datalist[[i]] <-a
}
#To combine all
big_data = do.call(rbind, datalist)
#To remove duplicates
big_data <- subset(big_data, !duplicated(big_data$text))
final_data<- big_data[ , which(names(big_data) %in% c("favoriteCount","created","id",
"retweetCount","text","drugName"))]
df <- final_data[, order(names(final_data))]
df$created <- strftime(df$created, '%Y-%m-%d')
return(df)
}
######################################################################################################
#########################   SENTIMENT FUNCTION FOR REVIEW ANALYSIS  ##################################
######################################################################################################
score.sentiment = function(sentences , pos.words, neg.words , .progress='none')
{
require(plyr)
require(stringr)
scores = laply(sentences,function(sentence,pos.words,neg.words)
{
sentence =gsub('[[:punct:]]','',sentence)
sentence =gsub('[[:cntrl:]]','',sentence)
sentence =gsub('\\d+','',sentence)
sentence =gsub(" ?(f|ht)tp(s?)://(.*)[.][a-z]+", "", sentence)
sentence=str_replace_all(sentence,"[^[:graph:]]", " ")
sentence=tolower(sentence)
word.list=str_split(sentence,'\\s+')
words=unlist(word.list)
pos.matches=match(words,pos.words)
neg.matches=match(words,neg.words)
pos.matches = !is.na(pos.matches)
neg.matches = !is.na(neg.matches)
score=sum(pos.matches)-sum(neg.matches)
return(score)
},pos.words,neg.words,.progress=.progress)
scores.df=data.frame(scores=scores)
return(scores.df)
}
######################################################################################################
########################## Twitter Sentiment Analysis Function  ######################################
######################################################################################################
TwitterSentimentAnalysisFunction <-function(){
w <- TwitterScoreFunction()
senti <- calculate_sentiment(w$text)
s1<-data.frame()
sentimentOfText<- senti$sentiment
output <- cbind(w,sentimentOfText)
output$sentimentOfText <- as.character(output$sentimentOfText)
output$sentimentOfText[output$sentimentOfText == "Positive"] <- "1"
output$sentimentOfText[output$sentimentOfText == "Very Positive"] <- "2"
output$sentimentOfText[output$sentimentOfText == "Negative"] <- "-1"
output$sentimentOfText[output$sentimentOfText == "Very Negative"] <- "-2"
output$sentimentOfText[output$sentimentOfText == "Neutral"] <- "0"
output$sentimentOfText <- as.numeric(output$sentimentOfText)
a<- max(output$favoriteCount)
b<- min(output$favoriteCount)
output$normFavcount <- with(output, (output$favoriteCount-b)/a )
c<- max(output$retweetCount)
d<- min(output$retweetCount)
output$normRetcount <- with(output, (output$retweetCount-d)/c )
output$sum<- (2*output$normRetcount)+(output$normFavcount)+1
output$normalizedRating <-  (output$sum*output$sentimentOfText)
output$Rating<-output$normalizedRating
output$Rating<- rescale(output$normalizedRating, to = c(0, 5), from = range(output$normalizedRating, na.rm = TRUE, finite = TRUE))
return(output)
}
############################################################################################################
##########################################     Main function     ###########################################
############################################################################################################
DrugAnalysisFunction <-function(){
w<- TwitterSentimentAnalysisFunction()
## if needed include round command for w$Rating
w2 <- transform(w, user=match(id, unique(id)))
w3 <- transform(w2,item=match(drugName, unique(drugName)))
final_data<- w3[ , which(names(w3) %in% c("user","item","Rating"))]
return(final_data)
}
############################################################################################################
#################     POPULARITY BASED RECOMMENDATION SYSTEM     ###########################################
############################################################################################################
PopularityDrugRec <-function(){
ratings<-DrugAnalysisFunction()
names(ratings)[names(ratings) == 'Rating'] <- 'rating'
ratingmat <- dcast(ratings, user~item, value.var = "rating", na.rm=FALSE)
ratingmat <- as.matrix(ratingmat[,-1]) #remove userrow at first column in above frame
#Convert rating matrix into a recommenderlab sparse matrix
ratingmat <- as(ratingmat, "realRatingMatrix")
#Create Recommender Model. "POPULAR" stands for POPULARITY BASED Filtering
recommender_model <- Recommender(ratingmat[1:nrow(ratingmat)], method = "POPULAR")
############Create predictions#############################
recom <- predict(recommender_model, ratingmat[1:nrow(ratingmat)],n=ncol(ratingmat))
#########Converting output into matrix
recom_list <- as(recom, "matrix")
recom_list <-as.data.frame(recom_list)
a<- colMeans(x=recom_list, na.rm = TRUE)
b<- as.matrix(a)
rows <- which(b > mean(b))
f<- input[rows,2]
return(as.data.frame(f))
}
############################################################################################################
####################     CONTENT BASED RECOMMENDATION SYSTEM     ###########################################
############################################################################################################
ContentDrugRec <-function(){
i1<-menu(c("1. OTC- Over the Counter", "2. Rx/OTC- Prescription or Over the Counter"),
graphics = TRUE, title="Type of Drug do you need")
i2<-menu(c("1.A ", "2.B","3.C ", "4.D","5.X","6.N"),
graphics = TRUE, title="select the pregnency level")
i<- input[,-c(1,2)]
ui <-data.frame(matrix(NA, nrow = 1, ncol = ncol(i)))
colnames(ui) <- colnames(i)
switch(i1,
m = {
ui$OTC<-1
},
m = {
ui$OTC<-1
ui$bothRxOTC<-1
}
)
switch(i2,
m = {
ui$PregA<-"1"
},
m = {
ui$PregA<-"1"
ui$PregB<-"1"
},
m = {
ui$PregA<-"1"
ui$PregB<-"1"
ui$PregC<-"1"
},
m = {
ui$PregA<-"1"
ui$PregB<-"1"
ui$PregC<-"1"
ui$PregD<-"1"
},
m = {
ui$PregA<-"1"
ui$PregB<-"1"
ui$PregC<-"1"
ui$PregD<-"1"
ui$PregX<-"1"
},
m = {
ui$PregA<-"1"
ui$PregB<-"1"
ui$PregC<-"1"
ui$PregD<-"1"
ui$PregX<-"1"
ui$PregN<-"1"
}
)
ui[is.na(ui)] <- 0
sim_mat <- rbind.data.frame(ui, i)
sim_mat <- data.frame(lapply(sim_mat,function(x){as.integer(x)})) #convert data to type integer
sim_results <- dist(sim_mat, method = "cosine")
sim_results <- as.data.frame(as.matrix(sim_results[1:nrow(i)]))
rows <- which(sim_results > mean(sim_results$V1))
return(input[rows,2])
}
############################################################################################################
####################     CONTENT BASED RECOMMENDATION SYSTEM     ###########################################
############################################################################################################
RunApplication<-function(){
output1 <- ContentDrugRec()
output1 <- as.data.frame(output1)
output2 <- PopularityDrugRec()
colnames(output1)<- colnames(output2)
finaloutput <- rbind(output1,output2) # rbind-combining the results
finaloutput1 <-as.data.frame(table(finaloutput)) #table function returning the output frequency values
finaloutput2 <- finaloutput1[finaloutput1$Freq==2,] #returning the high freuent values: bg is two times
finaloutput3 <- finaloutput2$finaloutput #obtaining DRUG names on the data frame
finaloutput4 <- as.data.frame(finaloutput3)
finaloutput5<-finaloutput4$finaloutput3
return(finaloutput5)
}
library(scales)
library(RSentiment)
library(RColorBrewer)
library(wordcloud)
library(tm)
library(twitteR)
library(ROAuth)
library(plyr)
library(stringr)
library(base64enc)
library(wordcloud)
library(SnowballC)
library(tm)
library(RCurl)
library(purrr)
library(dplyr)
library(reshape2)
library(recommenderlab)
library(recosystem)
library(SlopeOne)
library(SVDApproximation)
library(data.table)
library(RColorBrewer)
library(ggplot2)
######################################################################################################
#########################     TWITTER AUTHENTICATION PROCESS      ####################################
######################################################################################################
require("ROAuth")
require("RCurl")
library(scales)
library(RSentiment)
library(RColorBrewer)
library(wordcloud)
library(tm)
library(twitteR)
library(ROAuth)
library(plyr)
library(stringr)
library(base64enc)
library(wordcloud)
library(SnowballC)
library(tm)
library(RCurl)
library(purrr)
library(dplyr)
library(reshape2)
library(recommenderlab)
library(recosystem)
library(SlopeOne)
library(SVDApproximation)
library(data.table)
library(RColorBrewer)
library(ggplot2)
######################################################################################################
#########################     TWITTER AUTHENTICATION PROCESS      ####################################
######################################################################################################
require("ROAuth")
require("RCurl")
t_consumer_key<-	'JALgcUhEQKGP3N1JXcg5oxJ4O'
t_consumer_secret<- 'GGqQsh0mHNNLqVKu9DF0rQs6PmFfEwwOCzJLZKHnlH5lLNoZSh'
t_access_token<-	'958495952041627649-63gHmzaZRdBnQM6p2UhRlKVNZcFd1pP'
t_access_secret <-	'rUbpZgVGj8gF5Uz6uN6GnWWb88JcRzxi2nXJ7OWCbQ36i'
setup_twitter_oauth(t_consumer_key,t_consumer_secret,t_access_token,t_access_secret)
input <- read.csv(file ="inputTableFinal.csv",sep = ",",stringsAsFactors=FALSE)
pos.words <- scan('C:/Users/monis/Pictures/Capstone Project R/druganalysisLocal/positive-words.txt',
what='character', comment.char=';') #folder with positive dictionary
neg.words <- scan('C:/Users/monis/Pictures/Capstone Project R/druganalysisLocal/negative-words.txt',
what='character', comment.char=';') #folder with negative dictionary
w<-RunApplication()
readline("Suggestion list od DRUGSbased on your input")
readline("Suggestion list of DRUGS based on your input")
print(w, max.levels = 0)
